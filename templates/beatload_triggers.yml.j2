---
apiVersion: v1
data:
  ca.crt: {{ beatload_ca_data['content'] }}
kind: Secret
metadata:
  name: beatload-cert
  namespace: {{ beatload_namespace }}
  labels:
    app: beatload-app
type: Opaque
---
apiVersion: v1
data:
  user: {{ beatload_elastic_user | b64encode }}
  pass: {{ beatload_elastic_pass | b64encode }}
kind: Secret
metadata:
  name: beatload-elastic-cred
  namespace: {{ beatload_namespace }}
  labels:
    app: beatload-app
type: Opaque
---
apiVersion: v1
data:
  user: {{ beatload_kibana_user | b64encode }}
  pass: {{ beatload_kibana_pass | b64encode }}
kind: Secret
metadata:
  name: beatload-kibana-cred
  namespace: {{ beatload_namespace }}
  labels:
    app: beatload-app
type: Opaque
---
apiVersion: v1
data:
  filebeat.yml: |
    setup.template.enabled: true
    setup.template.name: "filebeat-%{[agent.version]}"
    setup.template.pattern: "filebeat-%{[agent.version]}-*"
    setup.template.overwrite: false

    setup.ilm.enabled: false
    #setup.ilm.enabled: auto
    #setup.ilm.rollover_alias: "filebeat-%{[agent.version]}"
    #setup.ilm.pattern: "{now/d}-000001"
    #setup.ilm.policy_name: "filebeat"
    #setup.ilm.check_exists: true
    #setup.ilm.overwrite: true

    setup.kibana:
      host: "kibana-svc:5601"
      protocol: https
      username: "${BEATLOAD_KIBANA_USER}"
      password: "${BEATLOAD_KIBANA_PASS}"
      ssl.certificate_authorities:
        - "/usr/share/filebeat/certs/ca.crt"
      ssl.enabled: true

    output.elasticsearch:
      enabled: true
      hosts: ["elastic-svc:9200"]
      username: "${BEATLOAD_ELASTIC_USER}"
      password: "${BEATLOAD_ELASTIC_PASS}"
      ssl.certificate_authorities:
        - "/usr/share/filebeat/certs/ca.crt"
      index: "filebeat-%{[agent.version]}"
      protocol: https
      ssl.enabled: true
  metricbeat.yml: |
    metricbeat.config.modules:
      path: ${path.config}/modules.d/*.yml
      reload.enabled: false

    setup.template.enabled: true
    setup.template.name: "metricbeat-%{[agent.version]}"
    setup.template.pattern: "metricbeat-%{[agent.version]}-*"
    setup.template.overwrite: false

    setup.ilm.enabled: false
    #setup.ilm.enabled: auto
    #setup.ilm.rollover_alias: "metricbeat-%{[agent.version]}"
    #setup.ilm.pattern: "{now/d}-000001"
    #setup.ilm.policy_name: "metricbeat"
    #setup.ilm.check_exists: true
    #setup.ilm.overwrite: true

    setup.kibana:
      host: "kibana-svc:5601"
      protocol: https
      username: "${BEATLOAD_KIBANA_USER}"
      password: "${BEATLOAD_KIBANA_PASS}"
      ssl.certificate_authorities:
        - "/usr/share/metricbeat/certs/ca.crt"
      ssl.enabled: true

    output.elasticsearch:
      enabled: true
      hosts: ["elastic-svc:9200"]
      username: "${BEATLOAD_ELASTIC_USER}"
      password: "${BEATLOAD_ELASTIC_PASS}"
      ssl.certificate_authorities:
        - "/usr/share/metricbeat/certs/ca.crt"
      index: "metricbeat-%{[agent.version]}"
      protocol: https
      ssl.enabled: true
  auditbeat.yml: |
    auditbeat.modules:
    - module: file_integrity
      paths:
        - /bin

    setup.template.enabled: true
    setup.template.name: "auditbeat-%{[agent.version]}"
    setup.template.pattern: "auditbeat-%{[agent.version]}-*"
    setup.template.overwrite: false

    setup.ilm.enabled: false
    #setup.ilm.enabled: auto
    #setup.ilm.rollover_alias: "auditbeat-%{[agent.version]}"
    #setup.ilm.pattern: "{now/d}-000001"
    #setup.ilm.policy_name: "auditbeat"
    #setup.ilm.check_exists: true
    #setup.ilm.overwrite: true

    setup.kibana:
      host: "kibana-svc:5601"
      protocol: https
      username: "${BEATLOAD_KIBANA_USER}"
      password: "${BEATLOAD_KIBANA_PASS}"
      ssl.certificate_authorities:
        - "/usr/share/auditbeat/certs/ca.crt"
      ssl.enabled: true

    output.elasticsearch:
      enabled: true
      hosts: ["elastic-svc:9200"]
      username: "${BEATLOAD_ELASTIC_USER}"
      password: "${BEATLOAD_ELASTIC_PASS}"
      ssl.certificate_authorities:
        - "/usr/share/auditbeat/certs/ca.crt"
      index: "auditbeat-%{[agent.version]}"
      protocol: https
      ssl.enabled: true
  conn-check.sh: |+
    #!/bin/sh

    attempt=0
    wait=30
    while [ $attempt -lt 20 ] ; do
      echo "Attempt: $attempt"
      curl --fail -H "Content-Type: application/json" -v -k -u ${ELASTIC_USER}:${ELASTIC_PASS} -X GET https://elastic-svc:9200/_cat/health &&
      curl --fail -H "Content-Type: application/json" -v -k -u ${KIBANA_USER}:${KIBANA_PASS} -X GET https://kibana-svc:5601/api/features &&
      exit 0

      echo "Test failed. Sleeping"
      sleep $wait
      attempt=`expr $attempt + 1`
    done

    echo "Exhausted attempts - exiting"
    exit 1
  ilm-setup.sh: |+
    #!/bin/sh

    function getContent {
      URL=$1

      echo "GET: $URL"
      OUTPUT=`curl -s -S --fail -H "Content-Type: application/json" -X GET -k -u ${ELASTIC_USER}:${ELASTIC_PASS} "https://elastic-svc:9200/$URL"`
      RET=$?

      echo $OUTPUT
      return $RET
    }

    function putContent {
      URL=$1
      CONTENT=$2

      echo "PUT: $URL"
      OUTPUT=`curl -s -S --fail -H "Content-Type: application/json" -X PUT -k -u ${ELASTIC_USER}:${ELASTIC_PASS} "https://elastic-svc:9200/$URL" -d "$CONTENT"`
      RET=$?
      echo $OUTPUT

      if [ $RET -ne 0 ] ; then
        echo "PUT request failed"
        return 1
      else
        echo "Connection succeeded"
      fi

      echo $OUTPUT | grep "{\"acknowledged\":true}" > /dev/null 2>&1
      if [ $? -ne 0 ] ; then
        echo "acknowledgement not found"
        return 1
      else
        echo "configuration acknowledged"
        return 0
      fi
    }

    getContent "_ilm/policy/default-beats"
    if [ $? -eq 22 ] ; then
      putContent "_ilm/policy/default-beats" '
      {
        "policy": {
          "phases": {
            "hot": {
              "min_age": "0ms",
              "actions": {
                "set_priority": {
                  "priority": 100
                }
              }
            },
            "delete": {
              "min_age": "90d",
              "actions": {
                "delete": {
                  "delete_searchable_snapshot": true
                }
              }
            }
          }
        }
      }'
      if [ $? -ne 0 ] ; then 
        echo "default-beats update failed"
        exit 1
      fi
    fi

    getContent "_ilm/policy/default-filebeat-netflow"
    if [ $? -eq 22 ] ; then
      putContent "_ilm/policy/default-filebeat-netflow" '
      {
        "policy": {
          "phases": {
            "hot": {
              "min_age": "0ms",
              "actions": {
                "set_priority": {
                  "priority": 100
                }
              }
            },
            "delete": {
              "min_age": "30d",
              "actions": {
                "delete": {
                  "delete_searchable_snapshot": true
                }
              }
            }
          }
        }
      }'
      if [ $? -ne 0 ] ; then 
        echo "default-filebeat-netflow update failed"
        exit 1
      fi
    fi

    getContent "_template/default-beats-map"
    if [ $? -eq 22 ] ; then
      putContent "_template/default-beats-map?include_type_name" '
      {
        "order": -10,
        "index_patterns": [
          "auditbeat-*",
          "filebeat-*",
          "winlogbeat-*"
        ],
        "settings": {
          "index": {
            "lifecycle": {
              "name": "default-beats"
            }
          }
        },
        "aliases": {},
        "mappings": {}
      }'
      if [ $? -ne 0 ] ; then 
        echo "default-beats-map update failed"
        exit 1
      fi
    fi

    getContent "_template/default-filebeat-netflow-map"
    if [ $? -eq 22 ] ; then
      putContent "_template/default-filebeat-netflow-map?include_type_name" '
      {
        "order": -1,
        "index_patterns": [
          "filebeat-netflow-*"
        ],
        "settings": {
          "index": {
            "lifecycle": {
              "name": "default-filebeat-netflow"
            }
          }
        },
        "aliases": {},
        "mappings": {}
      }'
      if [ $? -ne 0 ] ; then 
        echo "default-filebeat-netflow-map update failed"
        exit 1
      fi
    fi

    exit 0
kind: ConfigMap
metadata:
  name: beatload-beat-config
  namespace: stackmon
